#!/usr/bin/env ruby
require "brpm_auto"

usage =  "Usage: \n  build_docker_image <path to module>\n  build_docker_image <module name> [<module version>]"

if ARGV.size < 1
  puts "Missing arguments."
  puts usage
  exit
end

begin
  BrpmAuto.setup({ "log_file" => "/tmp/brpm_install.log", "also_log_to_console" => "true" })

  if File.directory?(File.expand_path(ARGV[0]))
    module_path = File.expand_path(ARGV[0])

    module_name = File.basename(module_path)
    module_config = YAML.load_file("#{module_path}/config.yml")
    module_version = module_config["version"]
  else
    module_name = ARGV[0]
    module_version = if ARGV.size >= 2
      ARGV[1]
    else
      module_spec = Gem::Specification.find_by_name(module_name)
      module_spec.version
    end
  end

  BrpmAuto.log "Building a docker image for module #{module_name} #{module_version}"

  if module_name == "brpm_content_framework"
    dockerfile_path = File.expand_path("#{File.dirname(__FILE__)}/../docker/framework/Dockerfile")
  else
    dockerfile_path = File.expand_path("#{File.dirname(__FILE__)}/../docker/modules/Dockerfile")
  end

  dockerfile_content = File.read(dockerfile_path)
  dockerfile_original_content = File.read(dockerfile_path)

  dockerfile_content.sub!(/(?<=ENV MODULE )(.*)/, module_name)
  dockerfile_content.sub!(/(?<=ENV VERSION )(.*)/, module_version)

  File.open(dockerfile_path, "w") do |file|
    file << dockerfile_content
  end

  BrpmAuto.log ""
  BrpmAuto.log ">>> Building docker image bmcrlm/#{module_name}:#{module_version}..."
  _, stderr, _, status = BrpmAuto.execute_command("docker build -t bmcrlm/#{module_name}:#{module_version} #{File.dirname(dockerfile_path)}") do |stdout_err|
    BrpmAuto.log "    #{stdout_err.chomp}"
  end
  raise "The process failed with status #{status.exitstatus}.\n#{stderr}" unless status.success?

  File.open(dockerfile_path, "w") do |file|
    file << dockerfile_original_content
  end

rescue Exception => e
  BrpmAuto.log_error "#{e}"
  BrpmAuto.log "\n\t" + e.backtrace.join("\n\t")

  raise e
end